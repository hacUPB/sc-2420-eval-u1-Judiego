#include <stdio.h>
#include <SDL.h>
#include "Constants.h"

SDL_Window* window = NULL;
SDL_Renderer* renderer = NULL;
int game_is_running = NULL;

int last_frame_time = 0;

int r = 0;
int g = 100;
int b = 200;

struct Rect {
    float x;
    float y;
    float width;
    float height;
    int velx;
    int vely;
} rect1, rect2, rect3;

int initialize_window(void) {
    if (SDL_Init(SDL_INIT_EVERYTHING) != 0) {
        fprintf(stderr, "Error initializing SDL \n");
        return FALSE;
    }
    window = SDL_CreateWindow(
        NULL,
        SDL_WINDOWPOS_CENTERED,
        SDL_WINDOWPOS_CENTERED,
        WINDOW_WIDTH,
        WINDOW_HEIGHT,
        SDL_WINDOW_BORDERLESS
    );
    if (!window) {
        fprintf(stderr, "Error creating SDL window \n");
        return FALSE;
    }

    renderer = SDL_CreateRenderer(window, -1, 0);
    if (!renderer) {
        fprintf(stderr, "Error creating renderer \n");
        return FALSE;
    }

    return TRUE;
}

void process_input() {
    SDL_Event event;
    SDL_PollEvent(&event);

    switch (event.type) {
    case SDL_QUIT:
        game_is_running = FALSE;
        break;
    case SDL_KEYDOWN:
        if (event.key.keysym.sym == SDLK_ESCAPE) {
            game_is_running = FALSE;
        }
        break;
    default:
        break;
    }
}

void setup() {
    rect1 = (struct Rect){ 20, 20, 50, 50, 0, VELOCIDADY };
    rect2 = (struct Rect){ 200, 20, 50, 50, 0, VELOCIDADY };
    rect3 = (struct Rect){ 400, 20, 50, 50, 0, VELOCIDADY };
}

void update() {
    int time_to_wait = FRAME_TARGET_TIME - (SDL_GetTicks() - last_frame_time);
    if (time_to_wait > 0 && time_to_wait <= FRAME_TARGET_TIME) {
        SDL_Delay(time_to_wait);
    }

    float delta_time = (SDL_GetTicks() - last_frame_time) / 1000.0f;
    last_frame_time = SDL_GetTicks();

    // Actualizar posici칩n de los rect치ngulos
    rect1.y += rect1.vely * delta_time;
    rect2.y += rect2.vely * delta_time;
    rect3.y += rect3.vely * delta_time;

    // Colisi칩n con las paredes (arriba y abajo)
    if (rect1.y <= 0 || rect1.y + rect1.height >= WINDOW_HEIGHT) {
        rect1.vely = -rect1.vely;
    }
    if (rect2.y <= 0 || rect2.y + rect2.height >= WINDOW_HEIGHT) {
        rect2.vely = -rect2.vely;
    }
    if (rect3.y <= 0 || rect3.y + rect3.height >= WINDOW_HEIGHT) {
        rect3.vely = -rect3.vely;
    }

    // Cambio de colores
    r = (r + 1) % 256;
    g = (g + 1) % 256;
    b = (b + 1) % 256;
}

void render() {
    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
    SDL_RenderClear(renderer);

    // Dibuja los tres rect치ngulos
    SDL_SetRenderDrawColor(renderer, r, g, b, 255);

    SDL_Rect sdl_rect1 = { (int)rect1.x, (int)rect1.y, (int)rect1.width, (int)rect1.height };
    SDL_RenderFillRect(renderer, &sdl_rect1);

    SDL_Rect sdl_rect2 = { (int)rect2.x, (int)rect2.y, (int)rect2.width, (int)rect2.height };
    SDL_RenderFillRect(renderer, &sdl_rect2);

    SDL_Rect sdl_rect3 = { (int)rect3.x, (int)rect3.y, (int)rect3.width, (int)rect3.height };
    SDL_RenderFillRect(renderer, &sdl_rect3);

    SDL_RenderPresent(renderer);
}

void destroy_window() {
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();
}

int main(int argc, char* args[]) {
    game_is_running = initialize_window();
    setup();

    while (game_is_running) {
        process_input();
        update();
        render();
    }

    destroy_window();
    return 0;
}

